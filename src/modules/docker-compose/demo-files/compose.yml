services:


  frontend:
    container_name: frontend-app
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      REACT_APP_API_URL: "http://backend:4000"
    depends_on:
      - backend
    networks:
      db-network:
        ipv4_address: 192.168.1.200
    volumes:
      - frontend-data:/app
    restart: unless-stopped
    command: -config.file=/etc/promtail/promtail.yml

  backend:
    container_name: backend-api
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
      args:
        NODE_ENV: "production"
        API_URL: "https://api.example.com"
      target: "final"
      cache_from:
        - myrepo/app:latest
      cache_to:
        - type=inline
      secrets:
        - my_secret
      ssh:
        - default
      extra_hosts:
        - "myhost:192.168.1.1"
    ports:
      - "4000:4000"
    environment:
      DATABASE_URL: "postgres://user:password@db:5432/mydb"
      CACHE_HOST: "redis"
    depends_on:
      db:
        condition: service_started
        restart: false
        required: true

      redis:
        condition: service_healthy
    networks:
      - backend-network
      - monitoring

    volumes:
      - backend-data:/app
    restart: unless-stopped
    command:
      - --api.insecure=false # Désactive le tableau de bord non sécurisé
      - --api.dashboard=true # Active le tableau de bord sécurisé
      - --providers.docker=true
      - --entrypoints.web.address=:80

    labels:
      - docker-composer.category=System
      - "traefik.http.routers.traefik-dashboard-https.rule=Host(`traefik.${HOST_DOMAIN_PUBLIC}`)"
      - "traefik.http.routers.traefik-dashboard-https.service=api@internal"
      - "traefik.http.routers.traefik-dashboard-https.tls.certresolver=myresolv"

volumes:
  directus_uploads:
    driver: local


networks:
  app-network:
    driver: bridge
    name: app-network
